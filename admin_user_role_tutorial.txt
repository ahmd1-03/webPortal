Tutorial Lengkap Pengaturan User dengan Role Admin untuk Portal Informasi Karawang

1. Database dan Tabel
---------------------
- Nama database: portal_karawang
- Tabel utama yang digunakan:
  a. users
     - Menyimpan data pengguna aplikasi.
     - Kolom penting: id, name, email, password, created_at, updated_at
  b. roles (jika menggunakan tabel terpisah untuk role)
     - Menyimpan daftar role, misalnya 'admin', 'user', dll.
  c. role_user (pivot table jika menggunakan many-to-many)
     - Menghubungkan users dengan roles.
  d. cards
     - Menyimpan data card seperti judul, deskripsi, gambar, link.

2. Menambahkan Role Admin ke User
---------------------------------
- Jika belum ada sistem role, Anda bisa menambahkan kolom 'role' di tabel users:
  - Tipe: string atau enum
  - Contoh nilai: 'admin', 'user'
- Contoh migrasi menambahkan kolom role:
  ```
  Schema::table('users', function (Blueprint $table) {
      $table->string('role')->default('user');
  });
  ```
- Setelah itu, Anda bisa mengupdate user tertentu menjadi admin:
  - Melalui database langsung (phpMyAdmin):
    UPDATE users SET role = 'admin' WHERE email = 'admin@example.com';
  - Atau melalui seeder atau tinker Laravel.

3. Login dengan Role Admin
--------------------------
- Sistem login menggunakan tabel users standar Laravel.
- Setelah login, Anda bisa memeriksa role user untuk mengizinkan akses ke admin dashboard.
- Contoh middleware untuk cek role admin:
  ```php
  public function handle($request, Closure $next)
  {
      if (auth()->check() && auth()->user()->role === 'admin') {
          return $next($request);
      }
      abort(403, 'Unauthorized');
  }
  ```
- Terapkan middleware ini pada route admin dashboard.

4. Ringkasan Tabel dan Kolom Penting
------------------------------------
- users: id, name, email, password, role, created_at, updated_at
- cards: id, judul, deskripsi, gambar, link, created_at, updated_at

5. Contoh Perintah untuk Migrasi dan Seeder
--------------------------------------------
- Jalankan migrasi:
  ```
  php artisan migrate
  ```
- Buat seeder untuk user admin (opsional):
  ```php
  use Illuminate\Database\Seeder;
  use App\Models\User;
  use Illuminate\Support\Facades\Hash;

  class AdminUserSeeder extends Seeder
  {
      public function run()
      {
          User::create([
              'name' => 'Admin',
              'email' => 'admin@example.com',
              'password' => Hash::make('password123'),
              'role' => 'admin',
          ]);
      }
  }
  ```
- Jalankan seeder:
  ```
  php artisan db:seed --class=AdminUserSeeder
  ```

6. Catatan Tambahan
-------------------
- Pastikan Anda mengamankan password dan data pengguna.
- Gunakan middleware untuk membatasi akses admin.
- Sesuaikan tampilan dan navigasi berdasarkan role user.

Jika Anda membutuhkan bantuan lebih lanjut untuk implementasi role dan middleware, silakan beri tahu saya.
